# -*- coding: utf-8 -*-
"""machine_learning_mvp_renan_leite.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UTH9aFUNY9v4x5nf6n6d8eHErf_j-yRX

**MODELO DE PREVISÃO DE DIABETES**

**Descrição do problema:**
O objetivo deste projeto é criar um modelo de machine learning para prever a ocorrência de diabetes em indivíduos com base em um conjunto de dados médicos e classificar os pacientes em duas categorias: diabéticos e não diabéticos, auxiliando na detecção precoce da doença.

**Hipótese:**
A previsão do diabetes pode ser influenciada por fatores como histórico familiar, hábitos alimentares, nível de atividade física, entre outros. Embora o dataset não contenha todos esses aspectos, a análise explorará as correlações entre essas variáveis e desenvolverá um modelo de classificação eficaz para prever a presença ou ausência da doença pontuadores.

**Dataset:**
O objetivo é criar um modelo preditivo para identificar se um paciente tem ou não diabetes com base nas variáveis fornecidas. As features serão extraídas e processadas para treinar diferentes algoritmos de classificação, a fim de obter um modelo que ajude na previsão de diabetes de maneira eficiente e precisa.

Os atributos do dataset são:

1.  Pregnancies: Número de vezes grávida
2.  Glucose: Concentração de glicose
3.  BloodPressure: Pressão arterial diastólica (mm Hg)
4.  SkinThickness: Espessura do pregueamento cutâneo (mm)
5.  Insulin: Insulina sérica após 2 horas (mu U/ml)o
6.  BMI: Índice de massa corporal (peso em kg/(altura em m)^2)
7.  DiabetesPedigreeFunction: Função de pedigree de diabetes
8.  Age: Idade (anos)
9.  Outcome: Variável de classe (0 ou 1)



**Estrutura:** O notebook está dividido assim:

1.  Importação das bibliotecas
2.  Acesso aos dados que serão a entrada do modelo de classificação  
3.  Pré-processamento dos dados  
4.  Processamento dos dados  
5.  Regreção Logística
6.  Verifica se a pessoa tem diabetes ou não usando alguns valores aleatórios

1) **IMPORTAÇÃO DAS BIBLIOTECAS NECESSÁRIAS PARA EXECUTAR O NOTEBOOK**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""2)  **ACESSO OS DADOS QUE SERÃO A ENTRADA DO MODELO DE CLASSIFICAÇÃO**"""

import pandas as pd  # Importa pandas corretamente

# URL do dataset
url = "https://raw.githubusercontent.com/renanleitem/machine_learning_mvp/main/diabetes_dataset.csv"

# Carregar o dataset
dataset = pd.read_csv(url)

# Visualizar as primeiras linhas
print(dataset.head())

"""3)  **PRÉ PROCESSAMENTO DOS DADOS**

"""

#Visualiza o conjunto de dados, suas dimensões, características e resumo estatístico
dataset.head()

#retorna as dimensões do conjunto de dados (dataset): (número de linhas, número de colunas).
dataset.shape

#fornece informações resumidas sobre o DataFrame
dataset.info()

#fornece um resumo estatístico das colunas numéricas do DataFrame
dataset.describe().T

#verifica a quantidade de valores nulos (ausentes) em cada coluna do DataFrame
dataset.isnull().sum()

"""Data Visualization"""

#cria um gráfico de barras (countplot)
sns.countplot(x = 'Outcome',data = dataset)

#cria um gráfico de dispersão
sns.pairplot(data = dataset, hue = 'Outcome')
plt.show()

#cria um mapa de calor (heatmap) para visualizar as correlações entre as variáveis numéricas no DataFrame
sns.heatmap(dataset.corr(), annot = True)
plt.show()

"""4) **PROCESSAMENTO DOS DADOS**"""

#substitui os valores 0 nas colunas, indicando dados ausentes
dataset_new = dataset
dataset_new[["Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"]] = dataset_new[["Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"]].replace(0, np.NaN)

#Contagem de NaN
dataset_new.isnull().sum()

"""5) **REGREÇÃO LOGÍSTICA**"""

#divide o DataFrame em duas partes: X e y:
y = dataset_new['Outcome']
X = dataset_new.drop('Outcome', axis=1)

#divide os dados em conjunto de treino (X_train, Y_train) e conjunto de teste (X_test, Y_test)
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.20, random_state = 42, stratify = dataset_new['Outcome'] )

#importa modelo de Regressão Logística.
from sklearn.linear_model import LogisticRegression
from sklearn.impute import SimpleImputer # Importa SimpleImputer

# Cria o modelo de regressão logística
model = LogisticRegression(max_iter=500)

# Cria um imputer para substituir os valores NaN pela média da coluna
imputer = SimpleImputer(strategy='mean')

# Ajusta o imputer aos dados de treino e transforma X_train e X_test
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

# Treina o modelo
model.fit(X_train, Y_train)

# Faz previsões no conjunto de teste
y_predict = model.predict(X_test)

#verifica previsões feitas pelo modelo de Regressão Logística
y_predict

#calcula a matriz de confusão para avaliar o desempenho do modelo de classificação
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, y_predict)
cm

#visualiza gráfico que mostra a matriz de confusão usando cores
sns.heatmap(pd.DataFrame(cm), annot=True)

#função utilizada calcular a acurácia do modelo de classificação
from sklearn.metrics import accuracy_score

#calcula a acurácia do modelo
accuracy =accuracy_score(Y_test, y_predict)
accuracy

"""6) **VERIFICA SE A PESSOA TEM DIABETES OU NÃO USANDO ALGUNS VALORES ALEATÓRIOS**"""

#usa um modelo de Regressão Logística para prever se a pessoa é diabética (1) ou não diabética (0).
y_predict = model.predict([[1,148,72,35,79.799,33.6,0.627,50]])
print(y_predict)
if y_predict==1:
    print("Diabetic")
else:
    print("Non Diabetic")